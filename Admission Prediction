import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
data = pd.read_csv(r'Admission_Prediction.csv')
print(data)
print('data is  \n ',data.info)
print(data.describe())
plt.scatter(data['GRE Score'], data['Chance of Admit'])
plt.show()

X= data.iloc[:,1:2].values  # gre vs chance of admit
Y= data.iloc[:,-1].values
print(X.shape)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy="mean")
X[:,:1] = imputer.fit_transform(X[:,:1])
print('X is as below=========================',X)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=0)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,Y_train)

print(" Intercept value is = ",regressor.intercept_)
print(" Coefficient value is = ", regressor.coef_)

# making prediction OF X
Y_pred = regressor.predict(X_test)
output_df = pd.DataFrame({ ' Actual': Y_test,'predicted': Y_pred})
print(" Actual v/s pridicted are \n", output_df)

# plotting a graph
plt.scatter(X_test,Y_test,color='black')
plt.plot(X_test,Y_pred,color = 'blue', linewidth= 3)
plt.xticks(())
plt.yticks(())
plt.show()

#EVALUTION
import numpy as np
from sklearn import metrics
explained_variance= metrics.explained_variance_score(Y_test,Y_pred)
mean_absolute_error = metrics.mean_absolute_error(Y_test,Y_pred)
mse = metrics.mean_squared_error(Y_test,Y_pred)
mean_squared_log_error = metrics.mean_squared_log_error(Y_test,Y_pred)
median_absolute_error = metrics.median_absolute_error(Y_test,Y_pred)
r2 = metrics.r2_score(Y_test,Y_pred)
print('Explained variance =',round(explained_variance,2))
print('Mean squared  log error = ',round(mean_squared_log_error,2))
print('R-sqaure = ',round(r2,4))
print('Mean absolute error  MAE = ',round(mean_absolute_error,2))
print('Mean square error MSE = ',round(mse,2))
print('Root mean square value RMSE = ',round(np.sqrt(mse),2))
from statsmodels.api import OLS
import statsmodels.api as sm
X = sm.add_constant(X)
summ = OLS(Y,X).fit().summary()
print(" summary of the data set is \n ",summ)
