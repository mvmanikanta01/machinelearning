import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
data = pd.read_csv(r'Admission_Prediction.csv')
print(data)
print('data is  \n ',data.info)
print(data.describe())
plt.scatter(data['CGPA'], data['Chance of Admit'])
plt.show()

X5 = data.iloc[:,6:7].values
Y5 = data.iloc[:,-1].values
print(X5.shape)

from sklearn.impute import  SimpleImputer
imputer = SimpleImputer(missing_values=np.nan,strategy="mean")
X5[:,:6] = imputer.fit_transform(X5[:,:6])
print('X5 is below \n',X5)

from sklearn.model_selection import train_test_split
X5_train,X5_test,Y5_train,Y5_test = train_test_split(X5,Y5,test_size=0.2, random_state=0)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X5_train,Y5_train)
print(" Intercept value is = ",regressor.intercept_)
print(' Coefficient value is = ',regressor.coef_)

# making prediction of X5
Y5_pred = regressor.predict(X5_test)
output_df = pd.DataFrame({'Actual':Y5_test,'Predicted':Y5_pred})
print(" Actual and predicted values of CGPA vs coa==\n",output_df)
plt.scatter(X5_test,Y5_test,color = 'black')
plt.plot(X5_test,Y5_pred,color = 'blue',linewidth=3)
plt.xticks(())
plt.yticks(())
plt.show()

#Evalution
import numpy as np
from sklearn import metrics
explained_variance= metrics.explained_variance_score(Y5_test,Y5_pred)
mean_absolute_error = metrics.mean_absolute_error(Y5_test,Y5_pred)
mse = metrics.mean_squared_error(Y5_test,Y5_pred)
mean_squared_log_error = metrics.mean_squared_log_error(Y5_test,Y5_pred)
median_absolute_error = metrics.median_absolute_error(Y5_test,Y5_pred)
r2 = metrics.r2_score(Y5_test,Y5_pred)
print('Explained variance =',round(explained_variance,2))
print('Mean squared  log error = ',round(mean_squared_log_error,2))
print('R-sqaure = ',round(r2,4))
print('Mean absolute error  MAE = ',round(mean_absolute_error,2))
print('Mean square error MSE = ',round(mse,2))
print('Root mean square value RMSE = ',round(np.sqrt(mse),2))
from statsmodels.api import OLS
import statsmodels.api as sm
X5 = sm.add_constant(X5)
summ = OLS(Y5,X5).fit().summary()
print(" summary of the data set is \n ",summ)
