import cv2
import math
import argparse

def highlightFace(net, frame, conf_threshold=0.7):
    frameOpencvDnn=frame.copy()
    frameHeight=frameOpencvDnn.shape[0]
    frameWidth=frameOpencvDnn.shape[1]
    blob=cv2.dnn.blobFromImage(frameOpencvDnn, 1.0, (300, 300), [104, 117, 123], True, False)

    net.setInput(blob)
    detections=net.forward()
    faceBoxes=[]
    for i in range(detections.shape[2]):
        confidence=detections[0,0,i,2]
        if confidence>conf_threshold:
            x1=int(detections[0,0,i,3]*frameWidth)
            y1=int(detections[0,0,i,4]*frameHeight)
            x2=int(detections[0,0,i,5]*frameWidth)
            y2=int(detections[0,0,i,6]*frameHeight)
            faceBoxes.append([x1,y1,x2,y2])
            cv2.rectangle(frameOpencvDnn, (x1,y1), (x2,y2), (0,255,0), int(round(frameHeight/150)), 8)
    return frameOpencvDnn,faceBoxes


parser=argparse.ArgumentParser()           #we can get the image argument from the command prompt
parser.add_argument('--image')

args=parser.parse_args()

faceProto="opencv_face_detector.pbtxt"     #graph definition and the trained weights of the model (Text format)
faceModel="opencv_face_detector_uint8.pb"  #graph definition and the trained weights of the model (Binary format)
ageProto="age_deploy.prototxt"             #describes the network configuration for age
ageModel="age_net.caffemodel"              #defines the internal states of the parameters of the layers
genderProto="gender_deploy.prototxt"       #describes the network configuration for gender
genderModel="gender_net.caffemodel"        #defines the internal states of the parameters of the layers

MODEL_MEAN_VALUES=(78.4263377603, 87.7689143744, 114.895847746)
ageList=['(0-2)', '(4-6)', '(8-12)', '(15-20)', '(25-32)', '(38-43)', '(48-53)', '(60-100)']
genderList=['Male','Female']

faceNet=cv2.dnn.readNet(faceModel,faceProto)        #ReadNet: method to load the networks(Trained weights, Network configuration)
ageNet=cv2.dnn.readNet(ageModel,ageProto)
genderNet=cv2.dnn.readNet(genderModel,genderProto)

video=cv2.VideoCapture(args.image if args.image else 0)  #Starts recording the video
padding=20
while cv2.waitKey(1)<0:
    hasFrame,frame=video.read()                 #Stores the video content in hasFrame and frame
    if not hasFrame:
        cv2.waitKey()                           #Waits until the face is detected
        break

    resultImg,faceBoxes=highlightFace(faceNet,frame)  #Calling the function
    if not faceBoxes:
        print("No face detected")

    for faceBox in faceBoxes:                           #Creating a face box
        face=frame[max(0,faceBox[1]-padding):
                   min(faceBox[3]+padding,frame.shape[0]-1),max(0,faceBox[0]-padding)
                   :min(faceBox[2]+padding, frame.shape[1]-1)]

        blob=cv2.dnn.blobFromImage(face, 1.0, (227,227), MODEL_MEAN_VALUES, swapRB=False)
        genderNet.setInput(blob)                    #Set the input and make a forward pass to the network
        genderPreds=genderNet.forward()
        gender=genderList[genderPreds[0].argmax()]
        print(f'Gender: {gender}')                  #Gender classifying

        ageNet.setInput(blob)
        agePreds=ageNet.forward()
        age=ageList[agePreds[0].argmax()]
        print(f'Age: {age[1:-1]} years')            #Age classifying

        cv2.putText(resultImg, f'{gender}, {age}', (faceBox[0], faceBox[1]-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,255,255), 2, cv2.LINE_AA)
        cv2.imshow("Detecting age and gender", resultImg)  #Showing the image with rectangular box, age and gender
